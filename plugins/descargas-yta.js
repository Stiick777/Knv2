import fetch from 'node-fetch';
import axios from 'axios';
import fs from 'fs';
import { exec } from 'child_process';

const handler = async (m, { args, conn }) => {
  if (!args[0]) 
    return m.reply('*[‚ùóùêàùêçùêÖùêé‚ùó] ùôÑùôâùôÇùôçùôÄùôéùôÄ ùôÄùôá ùòæùôäùôàùòºùôâùòøùôä ùôàùòºùôé ùôêùôâ ùôÄùôâùôáùòºùòæùôÄ ùòøùôÄ ùôîùôäùôêùôèùôêùòΩùôÄ*');

  const youtubeLink = args[0];

  const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com\/(watch\?v=|embed\/|v\/)|youtu\.be\/)[a-zA-Z0-9_-]{11}(\S*)?$/;

  if (!youtubeRegex.test(youtubeLink)) {
    return m.reply('*[‚ùóùêÑùêëùêëùêéùêë‚ùó] ùôÄùôá ùôÄùôâùôáùòºùòæùôÄ ùôãùôçùôäùôãùôäùôçùòæùôÑùôäùôâùòºùòøùôä ùôâùôä ùôÄùôé ùôëùòºÃÅùôáùôÑùòøùôä. ùòºùôéùôÄùôÇùôêÃÅùôçùòºùôèùôÄ ùòøùôÄ ùôÑùôâùôÇùôçùôÄùôéùòºùôç ùôêùôâ ùôÄùôâùôáùòºùòæùôÄ ùòæùôäùôçùôçùôÄùòæùôèùôä ùòøùôÄ ùôîùôäùôêùôèùôêùòΩùôÄ.*');
  }

  try {
    await m.react('üïì');
    
    const apiUrl = `https://api.agungny.my.id/api/youtube-audiov2?url=${encodeURIComponent(youtubeLink)}`;
    let apiResponse = await fetch(apiUrl);
    let response = await apiResponse.json();

    if (response.status === "true" && response.result && response.result.url) {
      const { url, title } = response.result;

      let originalPath = './temp_audio.mp3';
      let convertedPath = './converted_audio.mp3';

      const audioResponse = await axios.get(url, { responseType: 'arraybuffer' });
      fs.writeFileSync(originalPath, audioResponse.data);

      await new Promise((resolve, reject) => {
        exec(`ffmpeg -i ${originalPath} -ar 44100 -ab 64k -y ${convertedPath}`, (err) => {
          if (err) reject(err);
          else resolve();
        });
      });

      await conn.sendMessage(m.chat, {
        audio: fs.readFileSync(convertedPath),
        mimetype: 'audio/mp4',
        ptt: false,
        fileName: `${title}.mp3`,
      }, { quoted: m });

      fs.unlinkSync(originalPath);
      fs.unlinkSync(convertedPath);

      return await m.react('‚úÖ');
    }

    throw new Error("API fall√≥ o no retorn√≥ datos v√°lidos");
  } catch (error) {
    console.warn("Error en la API:", error.message);
    await m.reply("‚ùå Error al procesar la solicitud. Int√©ntalo m√°s tarde.");
  }
};

handler.help = ['yta'];
handler.tags = ['descargas'];
handler.command = /^yta|audio|fgmp3|dlmp3|mp3|getaud|yt(a|mp3|mp3)$/i;
handler.group = true;

export default handler;
